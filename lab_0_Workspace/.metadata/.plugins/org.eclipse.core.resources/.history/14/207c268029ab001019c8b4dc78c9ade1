#include "OPT3001.h"

#define I2C_BASE_USED I2C0_BASE

static void I2C_WaitWhileBusy(uint32_t base)
{
    while (I2CMasterBusy(base)) {}
}

void OPT3001_Init(uint32_t sysClk)
{
    // Habilitar periféricos
    SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C0);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);

    while (!SysCtlPeripheralReady(SYSCTL_PERIPH_I2C0));
    while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOB));

    // Configurar PB2 = SCL, PB3 = SDA
    GPIOPinConfigure(GPIO_PB2_I2C0SCL);
    GPIOPinConfigure(GPIO_PB3_I2C0SDA);
    GPIOPinTypeI2CSCL(GPIO_PORTB_BASE, GPIO_PIN_2);
    GPIOPinTypeI2C(GPIO_PORTB_BASE, GPIO_PIN_3);

    // Inicializar I2C0 a 400 kHz
    I2CMasterInitExpClk(I2C_BASE_USED, sysClk, true);
    I2CMasterEnable(I2C_BASE_USED);

    // Configuración inicial del sensor
    OPT3001_WriteReg(OPT3001_CONFIG_REG, OPT3001_DEFAULT_CONFIG);
}

void OPT3001_WriteReg(uint8_t reg, uint16_t data)
{
    uint8_t high = (data >> 8) & 0xFF;
    uint8_t low  = data & 0xFF;

    I2CMasterSlaveAddrSet(I2C_BASE_USED, OPT3001_ADDR, false);
    I2CMasterDataPut(I2C_BASE_USED, reg);
    I2CMasterControl(I2C_BASE_USED, I2C_MASTER_CMD_BURST_SEND_START);
    I2C_WaitWhileBusy(I2C_BASE_USED);

    I2CMasterDataPut(I2C_BASE_USED, high);
    I2CMasterControl(I2C_BASE_USED, I2C_MASTER_CMD_BURST_SEND_CONT);
    I2C_WaitWhileBusy(I2C_BASE_USED);

    I2CMasterDataPut(I2C_BASE_USED, low);
    I2CMasterControl(I2C_BASE_USED, I2C_MASTER_CMD_BURST_SEND_FINISH);
    I2C_WaitWhileBusy(I2C_BASE_USED);
}

uint16_t OPT3001_ReadReg(uint8_t reg)
{
    uint16_t result = 0;

    I2CMasterSlaveAddrSet(I2C_BASE_USED, OPT3001_ADDR, false);
    I2CMasterDataPut(I2C_BASE_USED, reg);
    I2CMasterControl(I2C_BASE_USED, I2C_MASTER_CMD_SINGLE_SEND);
    I2C_WaitWhileBusy(I2C_BASE_USED);

    I2CMasterSlaveAddrSet(I2C_BASE_USED, OPT3001_ADDR, true);
    I2CMasterControl(I2C_BASE_USED, I2C_MASTER_CMD_BURST_RECEIVE_START);
    I2C_WaitWhileBusy(I2C_BASE_USED);
    uint8_t msb = I2CMasterDataGet(I2C_BASE_USED);

    I2CMasterControl(I2C_BASE_USED, I2C_MASTER_CMD_BURST_RECEIVE_FINISH);
    I2C_WaitWhileBusy(I2C_BASE_USED);
    uint8_t lsb = I2CMasterDataGet(I2C_BASE_USED);

    result = ((uint16_t)msb << 8) | lsb;
    return result;
}

uint32_t OPT3001_ReadLux(void)
{
    uint16_t raw = OPT3001_ReadReg(OPT3001_RESULT_REG);
    uint16_t exponent = (raw >> 12) & 0x0F;
    uint32_t mantissa = raw & 0x0FFF;
    return mantissa * (1 << exponent);
}

uint16_t OPT3001_ReadManufacturerID(void)
{
    return OPT3001_ReadReg(OPT3001_MANUF_REG);
}

uint16_t OPT3001_ReadDeviceID(void)
{
    return OPT3001_ReadReg(OPT3001_DEVICEID_REG);
}

uint16_t OPT3001_ReadConfig(void)
{
    return OPT3001_ReadReg(OPT3001_CONFIG_REG);
}
